<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>coding-guide on Blog for gumeng.</title><link>https://blog.guyuemeng.com/tags/coding-guide/</link><description>Recent content in coding-guide on Blog for gumeng.</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 07 Feb 2020 16:32:26 +0800</lastBuildDate><atom:link href="https://blog.guyuemeng.com/tags/coding-guide/index.xml" rel="self" type="application/rss+xml"/><item><title>方舟编译器C++语言编程规范增强:空行</title><link>https://blog.guyuemeng.com/post/pgl_cc++/coding_guide/ark_coding/02-%E7%A9%BA%E8%A1%8C/</link><pubDate>Fri, 07 Feb 2020 16:32:26 +0800</pubDate><guid>https://blog.guyuemeng.com/post/pgl_cc++/coding_guide/ark_coding/02-%E7%A9%BA%E8%A1%8C/</guid><description>文章通过段落将内容变得更具节奏，代码通过换行来达到相同的效果。换行对于代码阅读来说非常重要，过多的空行会减少屏幕显示的有效代码；过少的空行又</description></item><item><title>方舟编译器C++语言编程规范增强:注释</title><link>https://blog.guyuemeng.com/post/pgl_cc++/coding_guide/ark_coding/01-%E6%B3%A8%E9%87%8A/</link><pubDate>Mon, 03 Feb 2020 16:50:26 +0800</pubDate><guid>https://blog.guyuemeng.com/post/pgl_cc++/coding_guide/ark_coding/01-%E6%B3%A8%E9%87%8A/</guid><description>注释风格 代码注释依据其面向的读者不同，可以分为接口注释与实现注释。 接口注释，重点在于描述业务功能、调用方式、注意事项等，为了使调用者无需了解</description></item><item><title>方舟编译器C++语言编程规范增强:序言</title><link>https://blog.guyuemeng.com/post/pgl_cc++/coding_guide/ark_coding/00-%E5%BA%8F%E8%A8%80/</link><pubDate>Mon, 03 Feb 2020 09:10:26 +0800</pubDate><guid>https://blog.guyuemeng.com/post/pgl_cc++/coding_guide/ark_coding/00-%E5%BA%8F%E8%A8%80/</guid><description>背景 《方舟编译器C++语言编程规范》主体部分起源于《华为C++语言通用编码规范》，据悉又参考《Google C++ Style Guide》引入部分内容，其定</description></item><item><title>LLVM编码规范(译)</title><link>https://blog.guyuemeng.com/post/pgl_cc++/coding_guide/llvm%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E8%AF%91/</link><pubDate>Mon, 15 Jul 2019 23:39:17 +0800</pubDate><guid>https://blog.guyuemeng.com/post/pgl_cc++/coding_guide/llvm%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E8%AF%91/</guid><description>LLVM Coding Standards(LLVM编码规范) [TOC] Introduction(简介) This document attempts to describe a few coding standards that are being used in the LLVM source tree. Although no coding standards should be regarded as absolute requirements to be followed in</description></item><item><title>C++代码格式规范引导(3)：命名空间</title><link>https://blog.guyuemeng.com/post/pgl_cc++/coding_guide/c++%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E8%A7%84%E8%8C%83%E5%BC%95%E5%AF%BC3%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</link><pubDate>Fri, 03 Nov 2017 23:06:22 +0800</pubDate><guid>https://blog.guyuemeng.com/post/pgl_cc++/coding_guide/c++%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E8%A7%84%E8%8C%83%E5%BC%95%E5%AF%BC3%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</guid><description>命名空间 C++语言中的作用域管理方法，大致可以分为两类：物理作用域、逻辑作用域。物理作用域，从磁盘分布、内存管理的角度分离作用域，如工程文件</description></item><item><title>C++代码格式规范引导(2)：头文件</title><link>https://blog.guyuemeng.com/post/pgl_cc++/coding_guide/c++%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E8%A7%84%E8%8C%83%E5%BC%95%E5%AF%BC2%E5%A4%B4%E6%96%87%E4%BB%B6/</link><pubDate>Wed, 25 Oct 2017 23:35:23 +0800</pubDate><guid>https://blog.guyuemeng.com/post/pgl_cc++/coding_guide/c++%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E8%A7%84%E8%8C%83%E5%BC%95%E5%AF%BC2%E5%A4%B4%E6%96%87%E4%BB%B6/</guid><description>头文件引用(#include) 头文件的类别大致可以分为以下几类：标准库STL、准标准库Boost、针对C++语言的第三方库(ACE等)、基于</description></item><item><title>C++代码格式规范引导(1)：引言与代码布局</title><link>https://blog.guyuemeng.com/post/pgl_cc++/coding_guide/c++%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E8%A7%84%E8%8C%83%E5%BC%95%E5%AF%BC1%E5%BC%95%E8%A8%80%E4%B8%8E%E4%BB%A3%E7%A0%81%E5%B8%83%E5%B1%80/</link><pubDate>Fri, 20 Oct 2017 00:00:26 +0800</pubDate><guid>https://blog.guyuemeng.com/post/pgl_cc++/coding_guide/c++%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E8%A7%84%E8%8C%83%E5%BC%95%E5%AF%BC1%E5%BC%95%E8%A8%80%E4%B8%8E%E4%BB%A3%E7%A0%81%E5%B8%83%E5%B1%80/</guid><description>“房子是用来住的，不是用来炒的”，这是当前最耳熟的一句房政。在我们编码界，有一句话具有着同样的经典意义，也同样耳熟能详，“代码是用来看的，不</description></item><item><title>内存泄露分析与规避(CPP)</title><link>https://blog.guyuemeng.com/post/pgl_cc++/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%84%E9%81%BFcpp/</link><pubDate>Mon, 11 Sep 2017 23:06:44 +0800</pubDate><guid>https://blog.guyuemeng.com/post/pgl_cc++/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%84%E9%81%BFcpp/</guid><description>简介 内存泄漏，一言以蔽之：程序运行时，分配在堆上的内存，程序结束后未释放。 触发场景 malloc或realloc创建的对象未free（new创</description></item></channel></rss>